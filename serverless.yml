# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
#
# For full config options, check the docs:
#    docs.serverless.com


service: platstack
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
frameworkVersion: '3'

# you can add additional plugins here
plugins:
 - serverless-appsync-plugin   # this plugin is specific to appsync
 - serverless-iam-roles-per-function  # This should be added to all functions!!

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**  
  
package:
  patterns:
    - '!package-lock.json'
    - '!package.json'
  excludeDevDependencies: false

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  appSync:
    - ${file(serverless.appsync-api.yml)}
  logRetentionInDays: 7   # this is the default log retention and can be overridden in each individual lambda



# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1



functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      BUCKET_NAME: !Ref AssetsBucket
    iamRoleStatements:   
      - Effect: Allow
        Action: s3:getObject
        Resource: !Sub ${AssetsBucket.Arn}/*
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

  editProfile:
    handler: functions/edit-profile.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
 # setup a CognitoUserPool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireUppercase: false
          RequireSymbols: false
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: name
          Required: false
          Mutable: true
      # add a trigger so when a user clicks on the link we can call our lambda function
      LambdaConfig:
        PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

  # add a client that communicates with our pool
  WebUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: web
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # create the permissions so cognito can contact our lambda
  UserPoolInvokeConfirmUserSignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref ConfirmUserSignupLambdaFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: profileId
          KeyType: HASH
      AttributeDefinitions: 
        - AttributeName: profileId
          AttributeType: S
        - AttributeName: screenName
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: byScreenName
          KeySchema:
            - AttributeName: screenName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Name
          Value: users-table

  AssetsBucket: 
    Type: AWS::S3::Bucket
    Properties:
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
